// src/bot/flows/detailedProduct.flow.ts
import { addKeyword, EVENTS } from '@builderbot/bot'
import { MemoryDB as Database } from '@builderbot/bot'
import type { MetaProvider as Provider } from '@builderbot/provider-meta'
import { log } from 'console'
import { fetchProductById } from '~/api/products.api'

const fmt  = (n: number) => `US$ ${Number(n ?? 0).toFixed(2)}`
const safe = (v: any) => (v === null || v === undefined || v === '' ? '‚Äî' : String(v))
const iso  = (d?: string) => (d ? new Date(d).toISOString().slice(0, 10) : '‚Äî')

export const detailedProduct = addKeyword<Provider, Database>(EVENTS.ACTION)
  .addAction(async (ctx, { provider }) => {
    const raw = String(ctx.body ?? '')

    // ‚úÖ Solo continuar si el body empieza por "prod:"
    if (!raw.startsWith('prod:')) {
      log('detailedProduct: ignorado (no es prod:*) =>', raw)
      return
    }

    // Extraer id num√©rico de "prod:<id>"
    const id = Number(raw.split(':')[1])
    if (!Number.isFinite(id)) {
      log('detailedProduct: id inv√°lido en body =>', raw)
      await provider.sendText(ctx.from, '‚ö†Ô∏è No pude identificar el producto seleccionado.')
      return
    }

    try {
      const p = await fetchProductById(id)

      const msg =
`üçè *${safe(p.name)}*
ID: ${safe(p.id)}   ‚Ä¢   Categor√≠a: ${safe(p.category)}
Estado: ${p.is_active ? '‚úÖ Activo' : '‚õî Inactivo'}

üíµ *Precio:* ${fmt(p.price)} 
üì¶ *Stock:* ${safe(p.stock)}
üóìÔ∏è *Lanzamiento:* ${iso(p.release_date)}

üìù *Descripci√≥n:*
${safe(p.description)}

üñºÔ∏è *Im√°genes:*
‚Ä¢ Principal: ${safe(p.image_primary_url)}
‚Ä¢ Secundaria: ${safe(p.image_secondary_url)}
‚Ä¢ Terciaria: ${safe(p.image_tertiary_url)}

‚öôÔ∏è *Especificaciones:*
‚Ä¢ iPhone: ${safe((p as any).iphone_spec)}
‚Ä¢ Mac: ${safe((p as any).mac_spec)}
‚Ä¢ iPad: ${safe((p as any).ipad_spec)}
‚Ä¢ Watch: ${safe((p as any).apple_watch_spec)}
‚Ä¢ Accesorio: ${safe((p as any).accessory_spec)}

üßæ *Trazabilidad:*
‚Ä¢ Creado: ${iso(p.created_at)}
‚Ä¢ Actualizado: ${iso(p.updated_at)}

üîó M√°s detalles: https://google.com`

      await provider.sendText(ctx.from, msg)
    } catch (err: any) {
      log('detailedProduct: fetchProductById error =>', err?.message || err)
      await provider.sendText(ctx.from, '‚ö†Ô∏è No pude obtener el detalle del producto.')
    }
  })
